-- prisma/setup.sql

-- Step 1: Add the foreign key constraint to link our Profile table to Supabase's auth table.
-- This ensures data integrity.
alter table public."Profile"
  add constraint fk_user
  foreign key (user_id)
  references auth.users (id)
  on delete cascade;

-- Step 2: Create the final, bulletproof function that will run on new user creation.
-- This version correctly reads from `raw_app_meta_data` and handles all NOT NULL fields.
create or replace function public.handle_new_user()
returns trigger
language plpgsql
security definer set search_path = public
as $$
begin
  -- Insert into the Profile table
  insert into public."Profile" (user_id, username, display_name, updated_at)
  values (
    new.id,
    -- Use the username from metadata, but if it's null, fallback to a generated one.
    coalesce(new.raw_app_meta_data->>'username', split_part(new.email, '@', 1) || '_' || substr(md5(random()::text), 1, 4)),
    -- Use the display_name from metadata, but if it's null, fallback to the email prefix.
    coalesce(new.raw_app_meta_data->>'display_name', split_part(new.email, '@', 1)),
    -- Provide a value for the NOT NULL updated_at column.
    now()
  );

  -- Insert into the Space table. The `id` will be auto-generated by the database.
  insert into public."Space" (owner_id, name, type, "updatedAt")
  values (new.id, 'Personal Space', 'PERSONAL', now());

  return new;
end;
$$;

-- Step 3: Create the trigger that calls our function after a new user signs up.
create or replace trigger on_auth_user_created
  after insert on auth.users
  for each row execute procedure public.handle_new_user();