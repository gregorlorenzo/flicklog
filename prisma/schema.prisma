// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum SpaceType {
  PERSONAL
  SHARED
}

enum SpaceMemberRole {
  ADMIN
  MEMBER
}

enum CommentType {
  QUICK_TAKE
  DEEPER_THOUGHTS
}

model Profile {
  user_id      String   @id @default(uuid())
  username     String   @unique
  display_name String?
  avatar_url   String?
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt

  owned_spaces    Space[]
  ratings         Rating[]
  comments        Comment[]
  memberships     SpaceMember[]
  pending_ratings PendingRating[]
}

model Space {
  id        String    @id @default(uuid())
  name      String
  type      SpaceType @default(PERSONAL)
  owner_id  String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  owner       Profile       @relation(fields: [owner_id], references: [user_id])
  members     SpaceMember[]
  log_entries LogEntry[]

  @@index([owner_id])
}

model SpaceMember {
  user_id  String
  space_id String
  role     SpaceMemberRole @default(MEMBER)

  user  Profile @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  space Space   @relation(fields: [space_id], references: [id], onDelete: Cascade)

  @@id([user_id, space_id])
}

model LogEntry {
  id        String   @id @default(uuid())
  space_id  String
  tmdb_id   String
  tmdb_type String
  createdAt DateTime @default(now())

  space           Space           @relation(fields: [space_id], references: [id], onDelete: Cascade)
  ratings         Rating[]
  pending_ratings PendingRating[]

  @@unique([space_id, tmdb_id, tmdb_type])
}

model Rating {
  id           String   @id @default(uuid())
  log_entry_id String
  user_id      String
  value        Float
  watched_on   DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  log_entry LogEntry  @relation(fields: [log_entry_id], references: [id], onDelete: Cascade)
  user      Profile   @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  comments  Comment[]
}

model Comment {
  id        String      @id @default(uuid())
  rating_id String
  user_id   String
  type      CommentType
  content   String
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  rating Rating  @relation(fields: [rating_id], references: [id], onDelete: Cascade)
  author Profile @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
}

model PendingRating {
  log_entry_id String
  user_id      String

  log_entry LogEntry @relation(fields: [log_entry_id], references: [id], onDelete: Cascade)
  user      Profile  @relation(fields: [user_id], references: [user_id], onDelete: Cascade)

  @@id([log_entry_id, user_id])
}
